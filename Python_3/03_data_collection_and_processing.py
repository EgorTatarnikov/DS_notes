#_____ Data Collection and Processing with Python _____#

    # Nested Data (–≤–ª–æ–∂–µ–Ω–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö) –≤ Python

# –í–ª–æ–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ ‚Äî —ç—Ç–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –¥—Ä—É–≥–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã:
# —Å–ø–∏—Å–∫–∏ –≤ —Å–ø–∏—Å–∫–∞—Ö, —Å–ª–æ–≤–∞—Ä–∏ –≤ —Å–ª–æ–≤–∞—Ä—è—Ö, —Å–ø–∏—Å–∫–∏ –≤ —Å–ª–æ–≤–∞—Ä—è—Ö –∏ —Ç.–¥.

# ‚ñ∂ –ü—Ä–∏–º–µ—Ä—ã –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä:

# –°–ø–∏—Å–æ–∫ —Å–ø–∏—Å–∫–æ–≤:
matrix = [
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9]
]

# –°–ª–æ–≤–∞—Ä—å —Å–ø–∏—Å–∫–æ–≤:
student_scores = {
    "Alice": [85, 90, 95],
    "Bob": [78, 82, 88]
}

# –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π:
users = [
    {"id": 1, "name": "Egor"},
    {"id": 2, "name": "Yeva"}
]

# –°–ª–æ–≤–∞—Ä—å —Å–ª–æ–≤–∞—Ä–µ–π:
user_profiles = {
    "egor": {"age": 30, "city": "Korolev"},
    "yeva": {"age": 25, "city": "Moscow"}
}

# ‚ñ∂ –î–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º:

# –≠–ª–µ–º–µ–Ω—Ç –≤–æ –≤–ª–æ–∂–µ–Ω–Ω–æ–º —Å–ø–∏—Å–∫–µ:
element = matrix[1][2]  # 6

# –û—Ü–µ–Ω–∫–∞ –ë–æ–±–∞:
score = student_scores["Bob"][1]  # 82

# –ò–º—è –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
name = users[1]["name"]  # "Yeva"

# –ì–æ—Ä–æ–¥ –ï–≥–æ—Ä–∞:
city = user_profiles["egor"]["city"]  # "Korolev"


# ‚ñ∂ –ò—Ç–µ—Ä–∞—Ü–∏—è –ø–æ –≤–ª–æ–∂–µ–Ω–Ω—ã–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∞–º:

# –ü–µ—Ä–µ–±–æ—Ä –º–∞—Ç—Ä–∏—Ü—ã:
for row in matrix:
    for value in row:
        print(value)

# –ü–µ—Ä–µ–±–æ—Ä —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤–∞—Ä–µ–π:
for user in users:
    print(user["name"])

# –ü–µ—Ä–µ–±–æ—Ä —Å–ø–∏—Å–∫–∞ —Å–ø–∏—Å–∫–æ–≤:
nested = [['a', 'b', 'c'],['d', 'e'],['f', 'g', 'h']]
for x in nested:
    print("level1: ")
    for y in x:
        print("     level2: " + y)

# –ü—Ä–∏–º–µ—Ä 1 : —Å–ø–∏—Å–æ–∫ —Å —Ä–∞–∑–Ω—ã–º —É—Ä–æ–≤–Ω–µ–º –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏
nested1 = [1, 2, ['a', 'b', 'c'],['d', 'e'],['f', 'g', 'h']]
for x in nested1:
    print("level1: ")
    if type(x) is list:
        for y in x:
            print("     level2: {}".format(y))
    else:
        print(x)

# –ü—Ä–∏–º–µ—Ä 2 : —Å–ø–∏—Å–æ–∫ —Å —Ä–∞–∑–Ω—ã–º —É—Ä–æ–≤–Ω–µ–º –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏ (–ª—é–±–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏)  
data = [
    1,
    [2, 3],
    [[4, 5], 6],
    7,
    [[[8]]]
]

def iterate_nested(lst):
    for item in lst:
        if isinstance(item, list):
            # –µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç ‚Äî —Å–ø–∏—Å–æ–∫, —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∏—Ç–µ—Ä–∏—Ä—É–µ–º –≤–Ω—É—Ç—Ä–∏
            yield from iterate_nested(item)
        else:
            yield item

for value in iterate_nested(data):
    print(value, end=' ')
print()


# ‚ñ∂ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:

# –ò–∑–º–µ–Ω–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ:
matrix[0][1] = 42
users[0]["name"] = "Yegor"

# ‚ñ∂ –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏—ë–º—ã:

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞:
student_scores["Alice"].append(100)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–ª—é—á–∞:
if "egor" in user_profiles:
    print(user_profiles["egor"]["age"])




    # *args –∏ **kwargs –≤ Python

# –∑–Ω–∞–∫–∏ * –∏ ** –≤ –ø–∞–π—Ç–æ–Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ —Ñ—É–Ω–∫—Ü–∏–π
# * ‚Äî —Ä–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ—Ç –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã–π –æ–±—ä–µ–∫—Ç (—Å–ø–∏—Å–æ–∫, –∫–æ—Ä—Ç–µ–∂, —Å—Ç—Ä–æ–∫—É –∏ —Ç.–ø.). –ü–µ—Ä–µ–¥–∞—ë—Ç –µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç—ã –∫–∞–∫ –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã.
# ** ‚Äî —Ä–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å. –ü–µ—Ä–µ–¥–∞—ë—Ç –µ–≥–æ –ø–∞—Ä—ã –∫–ª—é—á=–∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞–∫ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã.
# ‚ñ∂ –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤:
numbers = [10, 20, 30]
params = {"sep": " | "}
print(*numbers, **params)  # 10 | 20 | 30

# ‚ñ∂ *args ‚Äî —Å–æ–±–∏—Ä–∞–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –≤ –∫–æ—Ä—Ç–µ–∂
# *args ‚Äî –Ω—É–∂–µ–Ω, —á—Ç–æ–±—ã –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –ª—é–±–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –≤ —Ñ—É–Ω–∫—Ü–∏—é.
# –ü–æ–ª–µ–∑–Ω–æ, –∫–æ–≥–¥–∞ —Ç—ã –Ω–µ –∑–Ω–∞–µ—à—å –∑–∞—Ä–∞–Ω–µ–µ, —Å–∫–æ–ª—å–∫–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–æ.
def example_args(*args):
    print(args)

example_args(1, 2, 3)  # (1, 2, 3)

# ‚ñ∂ **kwargs ‚Äî —Å–æ–±–∏—Ä–∞–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –≤ —Å–ª–æ–≤–∞—Ä—å
# **kwargs ‚Äî –Ω—É–∂–µ–Ω, —á—Ç–æ–±—ã –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –ª—é–±–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ (–≤ –≤–∏–¥–µ –∫–ª—é—á=–∑–Ω–∞—á–µ–Ω–∏–µ).
# –£–¥–æ–±–Ω–æ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–ª–∏ –ø—Ä–æ–∫–∏–¥—ã–≤–∞–Ω–∏—è –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –≤ –¥—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
def example_kwargs(**kwargs):
    print(kwargs)

example_kwargs(name="Egor", age=30)  # {'name': 'Egor', 'age': 30}

# ‚ñ∂ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤–º–µ—Å—Ç–µ:
def example_all(*args, **kwargs):
    print("args:", args)
    print("kwargs:", kwargs)

example_all(1, 2, name="Yeva", job="AI")  
# args: (1, 2)
# kwargs: {'name': 'Yeva', 'job': 'AI'}




    #  –†–∞–±–æ—Ç–∞ —Å JSON –≤ Python (–º–æ–¥—É–ª—å json)

# JSON (JavaScript Object Notation) ‚Äî —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
# –®–∏—Ä–æ–∫–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ–±–º–µ–Ω–∞ –¥–∞–Ω–Ω—ã–º–∏ –º–µ–∂–¥—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º–∏, –æ—Å–æ–±–µ–Ω–Ω–æ –≤ API –∏ –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.

# –ü—Ä–∏–º–µ—Ä JSON:
# {
#     "name": "Egor",
#     "age": 30,
#     "skills": [
#         "Python", 
#         "Machine Learning"
#     ]
# }

# –ú–æ–¥—É–ª—å json (–≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –º–æ–¥—É–ª—å Python) –Ω—É–∂–µ–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–æ—Ä–º–∞—Ç–æ–º JSON
import json

# –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏: 
# dump, dumps - –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è Python-–æ–±—ä–µ–∫—Ç–æ–≤ –≤ JSON (—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è)
# load, loads -  –ü–∞—Ä—Å–∏–Ω–≥ JSON-—Å—Ç—Ä–æ–∫ –≤ Python-–æ–±—ä–µ–∫—Ç—ã (–¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è)

# üîπ –§—É–Ω–∫—Ü–∏—è json.dumps(obj, **kwargs)
# –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç Python-–æ–±—ä–µ–∫—Ç (—Å–ª–æ–≤–∞—Ä—å, —Å–ø–∏—Å–æ–∫ –∏ —Ç.–¥.) –≤ JSON-—Å—Ç—Ä–æ–∫—É (str).

data = {
    "name": "Egor",
    "age": 30,
    "skills": ["Python", "Data Science"]
}

json_string = json.dumps(data)
print(json_string)  # '{"name": "Egor", "age": 30, "skills": ["Python", "Data Science"]}'

# –° –æ—Ç—Å—Ç—É–ø–∞–º–∏ –∏ —á–∏—Ç–∞–µ–º—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º:
pretty_json = json.dumps(data, indent=4, ensure_ascii=False)    
# indent –¥–æ–±–∞–≤–ª—è–µ—Ç –æ—Ç—Å—Ç—É–ø—ã. –ë–µ–∑ —ç—Ç–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ JSON –±—É–¥–µ—Ç –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
# ensure_ascii=False - Unicode (–≤ —Ç–æ–º —á–∏—Å–ª–µ —Ä—É—Å—Å–∫–∏–µ) —Å–∏–º–≤–æ–ª—ã —Å–æ—Ö—Ä–∞–Ω—è—Ç—Å—è –≤ —á–∏—Ç–∞–µ–º–æ–º –≤–∏–¥–µ, –∞ –Ω–µ –≤ –≤ \uXXXX
print(pretty_json)
# {
#     "name": "Egor",
#     "age": 30,
#     "skills": [
#         "Python", 
#         "Machine Learning"
#     ]
# }

# --------------------------------------------
# üîπ –§—É–Ω–∫—Ü–∏—è json.loads(json_string)
# –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç JSON-—Å—Ç—Ä–æ–∫—É –æ–±—Ä–∞—Ç–Ω–æ –≤ Python-–æ–±—ä–µ–∫—Ç.

parsed_data = json.loads(json_string)
print(parsed_data["name"])  # "Egor"

# --------------------------------------------
# üîπ –§—É–Ω–∫—Ü–∏—è json.dump(obj, file, **kwargs)
# –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç Python-–æ–±—ä–µ–∫—Ç –≤ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.

with open("./files/data.json", "w", encoding="utf-8") as f:
    json.dump(data, f, indent=4, ensure_ascii=False)

# --------------------------------------------
# üîπ –§—É–Ω–∫—Ü–∏—è json.load(file)
# –°—á–∏—Ç—ã–≤–∞–µ—Ç JSON –∏–∑ —Ñ–∞–π–ª–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç Python-–æ–±—ä–µ–∫—Ç.

with open("./files/data.json", "r", encoding="utf-8") as f:
    loaded_data = json.load(f)
    print(loaded_data["skills"])

# --------------------------------------------
# üîπ –¢–∞–±–ª–∏—Ü–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö:

# Python —Ç–∏–ø          ‚Üí  JSON —Ç–∏–ø           ‚Üí  –ü—Ä–∏–º–µ—Ä Python          ‚Üí  –ü—Ä–∏–º–µ—Ä JSON
# ------------------------------------------------------------------------------
# dict                ‚Üí  –æ–±—ä–µ–∫—Ç (object)     ‚Üí  {"key": "value"}       ‚Üí  { "key": "value" }
# list, tuple         ‚Üí  –º–∞—Å—Å–∏–≤ (array)      ‚Üí  [1, 2, 3]              ‚Üí  [1, 2, 3]
# str                 ‚Üí  —Å—Ç—Ä–æ–∫–∞ (string)     ‚Üí  "Hello"                ‚Üí  "Hello"
# int, float          ‚Üí  —á–∏—Å–ª–æ (number)      ‚Üí  42, 3.14               ‚Üí  42, 3.14
# True                ‚Üí  true                ‚Üí  True                   ‚Üí  true
# False               ‚Üí  false               ‚Üí  False                  ‚Üí  false
# None                ‚Üí  null                ‚Üí  None                   ‚Üí  null
# --------------------------------------------

# –í–∞–∂–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã:
# - –ö–ª—é—á–∏ —Å–ª–æ–≤–∞—Ä—è (dict) –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å—Ç—Ä–æ–∫–∞–º–∏, –∏–Ω–∞—á–µ –ø—Ä–∏ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±—É–¥–µ—Ç –æ—à–∏–±–∫–∞.
#   –ù–∞–ø—Ä–∏–º–µ—Ä, {10: "val"} –≤—ã–∑–æ–≤–µ—Ç –æ—à–∏–±–∫—É –ø—Ä–∏ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏.
# - –ö–æ—Ä—Ç–µ–∂–∏ (tuple) —Å–µ—Ä–∏–∞–ª–∏–∑—É—é—Ç—Å—è –∫–∞–∫ —Å–ø–∏—Å–∫–∏ JSON.
# - –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, set, –æ–±—ä–µ–∫—Ç—ã –∫–ª–∞—Å—Å–æ–≤) —Ç—Ä–µ–±—É—é—Ç –∫–∞—Å—Ç–æ–º–Ω–æ–π —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏.




    # Deep and Shallow Copies

# üîπ –ü–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ (shallow copy):
# –ö–æ–ø–∏—Ä—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤–µ—Ä—Ö–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å –æ–±—ä–µ–∫—Ç–∞.
# –í–ª–æ–∂–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –æ—Å—Ç–∞—é—Ç—Å—è —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ —Ç–µ –∂–µ —Å–∞–º—ã–µ –¥–∞–Ω–Ω—ã–µ.

import copy

original = [[1, 2], [3, 4]]     # –í –ø–∞–º—è—Ç–∏ —Å–æ–∑–¥–∞—ë—Ç—Å—è –≤–Ω–µ—à–Ω–∏–π —Å–ø–∏—Å–æ–∫ –∏ –¥–≤–∞ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–ø–∏—Å–∫–∞.
shallow = copy.copy(original)   # –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–Ω–∞—è –∫–æ–ø–∏—è (shallow). –°–æ–∑–¥–∞–µ—Ç—Å—è –Ω–æ–≤—ã–π –≤–Ω–µ—à–Ω–∏–π —Å–ø–∏—Å–æ–∫, –Ω–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Å–ø–∏—Å–∫–∏ –æ—Å—Ç–∞—é—Ç—Å—è –æ–±—â–∏–º–∏ (—É–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞ —Ç–µ –∂–µ –æ–±—ä–µ–∫—Ç—ã)
shallow_2 = original[:]         # —Ç–æ–∂–µ —Å–ø–æ—Å–æ–± –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è. –°—Ä–µ–∑ –∫–æ–ø–∏—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ –≤–µ—Ä—Ö–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å

original[0][0] = 99             # –ú–µ–Ω—è–µ—Ç—Å—è –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –ø–µ—Ä–≤–æ–≥–æ –≤–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞. –≠—Ç–æ—Ç –≤–ª–æ–∂–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –æ–±—â–∏–π –¥–ª—è –≤—Å–µ—Ö –∫–æ–ø–∏–π ‚Üí –∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ç—Ä–∞–∑–∏—Ç—Å—è –≤–µ–∑–¥–µ.
shallow_2[1] = [10, 11]         # –ú—ã –∑–∞–º–µ–Ω—è–µ–º –≤—Ç–æ—Ä–æ–π –≤–ª–æ–∂–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤ shallow_2. –≠—Ç–æ —Ä–∞–∑—Ä—ã–≤–∞–µ—Ç —Å–≤—è–∑—å —Å original[1] ‚Üí —Ç–µ–ø–µ—Ä—å shallow_2[1] —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫, –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–π.
print(original)                 # [[99, 2], [3, 4]] - –∏–∑–º–µ–Ω–∏–ª—Å—è –æ—Ä–∏–≥–∏–Ω–∞–ª
print(shallow)                  # [[99, 2], [3, 4]] - –∏ –∫–æ–ø–∏—è
print(shallow_2)                # [[99, 2], [10, 11]] - –≤—Ç–æ—Ä–∞—è –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç—å –∑–∞–º–µ–Ω–µ–Ω–∞, –ø–µ—Ä–≤–∞—è –≤—Å—ë –µ—â—ë —Å—Å—ã–ª–∞–µ—Ç—Å—è –Ω–∞ –æ–±—â–∏–π –æ–±—ä–µ–∫—Ç

# üîπ –ì–ª—É–±–æ–∫–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ (deep copy):
# –ö–æ–ø–∏—Ä—É—é—Ç—Å—è –≤—Å–µ —É—Ä–æ–≤–Ω–∏, –≤–∫–ª—é—á–∞—è –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã.
# –†–µ–∑—É–ª—å—Ç–∞—Ç ‚Äî –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–µ–∑–∞–≤–∏—Å–∏–º–∞—è –∫–æ–ø–∏—è.

original = [[1, 2], [3, 4]]
deep = copy.deepcopy(original)  # –≥–ª—É–±–æ–∫–∞—è –∫–æ–ø–∏—è (deep)

deep[0][0] = 99
print(original)                 # [[1, 2], [3, 4]] ‚Äî –æ—Ä–∏–≥–∏–Ω–∞–ª –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è




    # Map, Filter, List Comprehensions, and Zip

# --- –§—É–Ω–∫—Ü–∏—è map() ---
# –°–∏–≥–Ω–∞—Ç—É—Ä–∞: map(function, iterable)
# –ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –∫ –∫–∞–∂–¥–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É —Å–ø–∏—Å–∫–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ò–¢–ï–†–ê–¢–û–† (–Ω–µ —Å–ø–∏—Å–æ–∫!)
# –ß—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç ‚Äî –Ω—É–∂–Ω–æ –æ–±–µ—Ä–Ω—É—Ç—å –≤ list()

nums = [1, 2, 3, 4]

# –ü—Ä–∏–º–µ—Ä 1: lambda-—Ñ—É–Ω–∫—Ü–∏—è
print(list(map(lambda x: 2 * x, nums)))  # [2, 4, 6, 8]

# –ü—Ä–∏–º–µ—Ä 2: –∏–º–µ–Ω–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def double(x):
    return x * 2

print(list(map(double, nums)))          # [2, 4, 6, 8]

# –ë–µ–∑ map ‚Äî —Ç–æ—Ç –∂–µ —ç—Ñ—Ñ–µ–∫—Ç –≤—Ä—É—á–Ω—É—é:
def doubleStuff(a_list):
    new_list = []
    for value in a_list:
        new_elem = double(value)
        new_list.append(new_elem)
    return new_list

print(doubleStuff(nums))                # [2, 4, 6, 8]


# --- –§—É–Ω–∫—Ü–∏—è filter() ---
# –°–∏–≥–Ω–∞—Ç—É—Ä–∞: filter(function, iterable)
# –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Ç–µ—Ä–∞—Ç–æ—Ä –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö —Ñ—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True.
# –ß—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç ‚Äî –Ω—É–∂–Ω–æ –æ–±–µ—Ä–Ω—É—Ç—å –≤ list()

countries = ['Canada', 'Mexico', 'Brazil', 'Chile', 'Denmark', 'Botswana', 'Spain', 'Britain', 'Portugal', 'Russia', 
             'Argentina', 'Belarus', 'Laos', 'Australia', 'Panama', 'Egypt', 'Morocco', 'Switzerland', 'Belgium']
print(list(filter(lambda x: 'B' in x, countries)))  # ['Brazil', 'Botswana', 'Britain', 'Belarus', 'Belgium']

nums = [1, 2, 3, 4, 5]

# –ü—Ä–∏–º–µ—Ä 1: lambda-—Ñ—É–Ω–∫—Ü–∏—è
print(list(filter(lambda x: x % 2 != 0, nums)))  # [1, 3, 5]

# –ü—Ä–∏–º–µ—Ä 2: –∏–º–µ–Ω–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def is_odd(x):
    return x % 2 != 0

print(list(filter(is_odd, nums)))                # [1, 3, 5]

# –ë–µ–∑ filter ‚Äî –≤—Ä—É—á–Ω—É—é:
def filter_odds(a_list):
    result = []
    for x in a_list:
        if is_odd(x):
            result.append(x)
    return result

print(filter_odds(nums))                         # [1, 3, 5]


# --- –§—É–Ω–∫—Ü–∏—è zip() ---
# –°–∏–≥–Ω–∞—Ç—É—Ä–∞: zip(iter1, iter2, ...)
# –û–±—ä–µ–¥–∏–Ω—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–ø–∏—Å–∫–æ–≤ –≤ –∫–æ—Ä—Ç–µ–∂–∏
# –ß—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç ‚Äî –Ω—É–∂–Ω–æ –æ–±–µ—Ä–Ω—É—Ç—å –≤ list()

names = ['Alice', 'Bob', 'Charlie']
ages = [25, 30, 35]

# –ü—Ä–∏–º–µ—Ä 1: –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–æ–≤
print(list(zip(names, ages)))  # [('Alice', 25), ('Bob', 30), ('Charlie', 35)]

# –ü—Ä–∏–º–µ—Ä 2: —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∞
zipped = list(zip(names, ages))
print(zipped)                   # [('Alice', 25), ('Bob', 30), ('Charlie', 35)]
# * –ø–µ—Ä–µ–¥ zipped —Ä–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã: zip(('Alice', 25), ('Bob', 30), ('Charlie', 35))
# –∑–∞—Ç–µ–º zip(...) –≥—Ä—É–ø–ø–∏—Ä—É–µ—Ç –ø–æ –ø–æ–∑–∏—Ü–∏—è–º –≤–Ω—É—Ç—Ä–∏ –∫–æ—Ä—Ç–µ–∂–µ–π:
print(list(zip(*zipped)))   # [('Alice', 'Bob', 'Charlie'), (25, 30, 35)]
# –¥–∞–ª–µ–µ –∫–æ—Ä—Ç–µ–∂ —Å–ø–∏—Å–∫–æ–≤ —Ä–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ—Ç—Å—è –≤ unzipped_names, unzipped_ages
unzipped_names, unzipped_ages = zip(*zipped)
print(unzipped_names)          # ('Alice', 'Bob', 'Charlie')
print(unzipped_ages)           # (25, 30, 35)

# –ü—Ä–∏–º–µ—Ä 3: —Å–ø–∏—Å–∫–∏ —Ä–∞–∑–Ω–æ–π –¥–ª–∏–Ω—ã
a = [1, 2, 3]
b = ['a', 'b']
print(list(zip(a, b)))         # [(1, 'a'), (2, 'b')]

# –ë–µ–∑ zip ‚Äî –≤—Ä—É—á–Ω—É—é:
def manual_zip(list1, list2):
    result = []
    for i in range(min(len(list1), len(list2))):
        result.append((list1[i], list2[i]))
    return result

print(manual_zip(a, b))        # [(1, 'a'), (2, 'b')]


# --- List Comprehension ---
# –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–º–µ–Ω—è–µ—Ç map –∏ filter
# –°–∏–≥–Ω–∞—Ç—É—Ä–∞: [expression for item in iterable if condition (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)]
# –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç List

# –ü—Ä–∏–º–µ—Ä 1: –∫–≤–∞–¥—Ä–∞—Ç—ã —á–∏—Å–µ–ª
print([x**2 for x in range(5)])          # [0, 1, 4, 9, 16]

# –ü—Ä–∏–º–µ—Ä 2: —Ç–æ–ª—å–∫–æ —á—ë—Ç–Ω—ã–µ
print([x for x in range(10) if x % 2 == 0])  # [0, 2, 4, 6, 8]

# –ü—Ä–∏–º–µ—Ä 3 —Å zip 
L1 = [1, 5, 2, 16, 32, 3, 54, 8, 100]
L2 = [1, 3, 10, 2, 42, 2, 3, 4, 3]
L3 = [x + y for (x, y) in list(zip(L1, L2)) if (x > 10 and y < 5)]
print(L3)   # [18, 57, 103]

# –ü—Ä–∏–º–µ—Ä 4: –∞–Ω–∞–ª–æ–≥ filter + map
print([x**2 for x in nums if x % 2 == 0])    # [4, 16]

# –ë–µ–∑ list comprehension ‚Äî –æ–±—ã—á–Ω—ã–π —Ü–∏–∫–ª:
def squared_evens(a_list):
    result = []
    for x in a_list:
        if x % 2 == 0:
            result.append(x ** 2)
    return result

print(squared_evens(nums))                  # [4, 16]


# –ü—Ä–∏–º–µ—Ä. –°–æ—Å—Ç–∞–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—ã–º–∏—Ä–∞—é—â–∏—Ö –≤–∏–¥–æ–≤.
species = [
    'golden retriever', 'white tailed deer', 'black rhino', 'brown squirrel',
    'field mouse', 'orangutan', 'sumatran elephant', 'rainbow trout',
    'black bear', 'blue whale', 'water moccasin', 'giant panda',
    'green turtle', 'blue jay', 'japanese beetle'
]

population = [
    10000, 90000, 1000, 2000000, 500000, 500, 1200, 8000,
    12000, 2300, 7500, 100, 1800, 9500, 125000
]

# –®–∞–≥ 1: –û–±—ä–µ–¥–∏–Ω–∏—Ç—å –≤ –ø–∞—Ä—ã (–≤–∏–¥, –ø–æ–ø—É–ª—è—Ü–∏—è)
pop_info = list(zip(species, population))

# –®–∞–≥ 2: –û—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ—Ö, —É –∫–æ–≥–æ –ø–æ–ø—É–ª—è—Ü–∏—è < 2500
endangered = [name for name, pop in pop_info if pop < 2500]

print(endangered)   # ['black rhino', 'orangutan', 'sumatran elephant', 'blue whale', 'giant panda', 'green turtle']




    # Data Parsing HTML / –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü

# –ú–æ–¥—É–ª—å requests –≤ Python ‚Äî —ç—Ç–æ –º–æ—â–Ω–∞—è –∏ —É–¥–æ–±–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å HTTP-–∑–∞–ø—Ä–æ—Å–∞–º–∏. –° –µ–≥–æ –ø–æ–º–æ—â—å—é –º–æ–∂–Ω–æ –ª–µ–≥–∫–æ:
# - —Å–∫–∞—á–∏–≤–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞,
# - –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å GET –∏ POST-–∑–∞–ø—Ä–æ—Å—ã,
# - —Ä–∞–±–æ—Ç–∞—Ç—å —Å API.

import requests
import json

page = requests.get("https://api.datamuse.com/words?rel_rhy=funny")
print(type(page))
print(page.text[:150]) # print the first 150 characters
print(page.url) # print the url that was fetched
print("------")
x = page.json() # turn page.text into a python object
print(type(x))
print("---first item in the list---")
print(x[0])
print("---the whole list, pretty printed---")
print(json.dumps(x, indent=2)) # pretty print the results


iTunes_response = requests.get("https://itunes.apple.com/search?term=jack+johnson&media=music&entity=musicTrack&limit=25")
py_data = json.loads(iTunes_response.text)
for r in py_data['results']:
    print(r['trackName'])




    # –î–ª—è —Å–ø—Ä–∞–≤–∫–∏

    # yield –∏ return

# return ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é
def f():
    return 1
    print("–≠—Ç–æ –Ω–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è")

print(f())  # 1

# yield ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ç–æ—á–∫–µ –∏ –ø—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é
# –§—É–Ω–∫—Ü–∏—è —Å yield ‚Äî —ç—Ç–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä. –û–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ –æ–¥–Ω–æ–º—É, —Å–æ—Ö—Ä–∞–Ω—è—è —Å–≤–æ—ë —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–∑–∂–µ.
# –§—É–Ω–∫—Ü–∏—è —Å yield ‚Äî —ç—Ç–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä, –∏ –æ–Ω–∞ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è, –∫–æ–≥–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–æ—Å—Ç–∏–≥–∞–µ—Ç –∫–æ–Ω—Ü–∞ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–ª–∏ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç return –±–µ–∑ –∑–Ω–∞—á–µ–Ω–∏—è.
def gen():
    yield 1
    yield 2
    yield 3

g = gen()
print(next(g))  # 1
print(next(g))  # 2
print(next(g))  # 3


    # yield from ‚Äî –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞

# –û–±—ã—á–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ yield:

def gen1():
    yield 1
    yield 2

def gen2():
    yield 3
    yield 4

# –ß—Ç–æ–±—ã –≤—ã–≤–µ—Å—Ç–∏ –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ gen1 –∏ gen2, –º–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å —Ç–∞–∫:

def combined_old():
    for v in gen1():
        yield v
    for v in gen2():
        yield v

# –ù–æ —ç—Ç–æ –≥—Ä–æ–º–æ–∑–¥–∫–æ. –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –µ—Å—Ç—å —É–¥–æ–±–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å:

def combined_new():
    yield from gen1()   # –¥–µ–ª–µ–≥–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä gen1()
    yield from gen2()   # –¥–µ–ª–µ–≥–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä gen2()

# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:

for val in combined_new():
    print(val)
# –í—ã–≤–æ–¥:
# 1
# 2
# 3
# 4